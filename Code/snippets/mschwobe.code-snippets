{
  "Comment: Single /": {
    "prefix": "/",
    "description": "Comment: Single /",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      ""
    ]
  },
  "Comment: Double //": {
    "prefix": "/",
    "description": "Comment: Double //",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "$LINE_COMMENT ${1:sectionName}",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      ""
    ]
  },
  "Comment: Single /*": {
    "prefix": "/",
    "description": "Comment: Single /*",
    "body": [
      "$BLOCK_COMMENT_START -------------------------------------------------------------------------- $BLOCK_COMMENT_END",
      ""
    ]
  },
  "Comment: Double //*": {
    "prefix": "/",
    "description": "Comment: Double //*",
    "body": [
      "$BLOCK_COMMENT_START -----------------------------------------------------------------------------",
      "$BLOCK_COMMENT_START ${1:sectionName}",
      "$BLOCK_COMMENT_START -------------------------------------------------------------------------- $BLOCK_COMMENT_END",
      ""
    ]
  },
  "Console: error": {
    "prefix": "conerr",
    "description": "Console: error",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["console.log(\"ðŸ”´ ${1}\", ${1});"]
  },
  "Console: warn": {
    "prefix": "conwarn",
    "description": "Console: warn",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["console.log(\"ðŸŸ¡ ${1}\", ${1});"]
  },
  "Console: log": {
    "prefix": "conlog",
    "description": "Console: log",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["console.log(\"ðŸŸ¢ ${1}\", ${1});"]
  },
  "Console: log stringified": {
    "prefix": "constr",
    "description": "Console: log stringified",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["console.log(\"ðŸŸ¢ ${1}\", JSON.stringify(${1}${2:, null, 2}));"]
  },
  "CSS: debug with outline": {
    "prefix": "debugcss",
    "description": "CSS: debug with outline",
    "scope": "css,scss",
    "body": ["* { outline: 1px dotted hotpink; }", ""]
  },
  "Array of length N": {
    "prefix": "arrn",
    "description": "Array of length N",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["[...Array(${1:n}).keys()]"]
  },
  "React: Pre component with stringified data": {
    "prefix": "prestr",
    "description": "React: Pre component with stringified data",
    "scope": "javascriptreact,typescriptreact",
    "body": [
      "<pre style={{ fontSize: \"10px\", tabSize: 2, width: \"fit-content\", padding: \"1em\", border: \"1px dashed\", overflow: \"auto\" }}>",
      "  {JSON.stringify(${1}, null, 2)}",
      "</pre>"
    ]
  },
  "React: Div component with forwardRef": {
    "prefix": "rcfr-div",
    "description": "Creates a React button component with forwardRef",
    "scope": "typescriptreact",
    "body": [
      "import { forwardRef } from \"react\";",
      "import { cn } from \"~/utils/misc\";",
      "",
      "export type ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Ref = React.ElementRef<\"div\">;",
      "",
      "export interface ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Props",
      "  extends Omit<",
      "    React.ComponentPropsWithoutRef<\"div\">,",
      "    \"children\" | \"className\"",
      "  > {",
      "  /** Sets the content. **Required** */",
      "  children: React.ReactNode;",
      "  /** Sets the `class` attribute. */",
      "  className?: string | undefined;",
      "}",
      "",
      "export const ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/} = forwardRef<${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Ref, ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Props>(",
      "  ({ children, className, ...props }, ref) => {",
      "    return (",
      "      <div {...props} className={cn(\"\", className)} ref={ref}>",
      "        {children}",
      "      </div>",
      "    );",
      "  },",
      ");",
      "",
      "${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}.displayName = \"${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}\";",
      ""
    ]
  },
  "React: Button component with forwardRef": {
    "prefix": "rcfr-button",
    "description": "Creates a React button component with forwardRef",
    "scope": "typescriptreact",
    "body": [
      "import { forwardRef } from \"react\";",
      "import { cn } from \"~/utils/misc\";",
      "",
      "export type ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Ref = React.ElementRef<\"button\">;",
      "",
      "export interface ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Props",
      "  extends Omit<",
      "    React.ComponentPropsWithoutRef<\"button\">,",
      "    \"children\" | \"className\" | \"type\"",
      "  > {",
      "  /** Sets the content. **Required** */",
      "  children: React.ReactNode;",
      "  /** Sets the `class` attribute. */",
      "  className?: string | undefined;",
      "  /** Sets the `type` attribute. **Required** */",
      "  type: \"button\" | \"submit\";",
      "}",
      "",
      "export const ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/} = forwardRef<${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Ref, ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Props>(",
      "  ({ children, className, type, ...props }, ref) => {",
      "    return (",
      "      <button {...props} type={type} className={cn(\"\", className)} ref={ref}>",
      "        {children}",
      "      </button>",
      "    );",
      "  },",
      ");",
      "",
      "${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}.displayName = \"${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}\";",
      ""
    ]
  },
  "React: Button component with forwardRef and cva": {
    "prefix": "rcfr-button-cva",
    "description": "Creates a React button component with forwardRef and cva",
    "scope": "typescriptreact",
    "body": [
      "$LINE_COMMENT TODO: Move utils to separate file.",
      "$LINE_COMMENT import { cn } from \"~/utils/misc\";",
      "import type { VariantProps } from \"class-variance-authority\";",
      "import { cva } from \"class-variance-authority\";",
      "import type { ClassValue } from \"clsx\";",
      "import clsx from \"clsx\";",
      "import { forwardRef } from \"react\";",
      "import { twMerge } from \"tailwind-merge\";",
      "",
      "export function dedupe<T>(arr: T[]) {",
      "  return [...new Set(arr)];",
      "}",
      "",
      "export function cn(...args: ClassValue[]) {",
      "  return twMerge(clsx(dedupe(args)));",
      "}",
      "",
      "export const ${TM_FILENAME/(.*?)\\..+/${1:/camelcase}/}Variants = cva(\"\", {",
      "  variants: {",
      "    size: {",
      "      sm: \"\",",
      "      \"sm-icon\": \"\",",
      "      md: \"\",",
      "      \"md-icon\": \"\",",
      "      lg: \"\",",
      "      \"lg-icon\": \"\",",
      "    },",
      "    variant: {",
      "      link: \"\",",
      "      \"link-danger\": \"\",",
      "      \"link-warning\": \"\",",
      "      \"link-success\": \"\",",
      "      ghost: \"\",",
      "      \"ghost-danger\": \"\",",
      "      \"ghost-warning\": \"\",",
      "      \"ghost-success\": \"\",",
      "      outline: \"\",",
      "      \"outline-danger\": \"\",",
      "      \"outline-warning\": \"\",",
      "      \"outline-success\": \"\",",
      "      solid: \"\",",
      "      \"solid-danger\": \"\",",
      "      \"solid-warning\": \"\",",
      "      \"solid-success\": \"\",",
      "    },",
      "  },",
      "  compoundVariants: [",
      "    {",
      "      variant: [\"link\", \"link-danger\", \"link-warning\", \"link-success\"],",
      "      className: \"\",",
      "    },",
      "    {",
      "      size: [\"sm\", \"md\", \"lg\"],",
      "      variant: [\"link\", \"link-danger\", \"link-warning\", \"link-success\"],",
      "      className: \"\",",
      "    },",
      "    {",
      "      size: [\"sm-icon\", \"md-icon\", \"lg-icon\"],",
      "      variant: [\"link\", \"link-danger\", \"link-warning\", \"link-success\"],",
      "      className: \"\",",
      "    },",
      "  ],",
      "  defaultVariants: {",
      "    size: \"md\",",
      "    variant: \"outline\",",
      "  },",
      "});",
      "",
      "export type ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Variants = VariantProps<typeof ${TM_FILENAME/(.*?)\\..+/${1:/camelcase}/}Variants>;",
      "",
      "$BLOCK_COMMENT_START export type RequiredProps<T, K extends keyof T> = Omit<T, K> &",
      "  Required<Pick<T, K>>;",
      "export type OptionalProps<T, K extends keyof T> = Omit<T, K> &",
      "  Partial<Pick<T, K>>;",
      "type RequiredVariantProp = RequiredProps<${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Variants, \"variant\">;",
      "type OptionalVariantProp = OptionalProps<RequiredVariantProp, \"variant\">; $BLOCK_COMMENT_END",
      "",
      "export type ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Ref = React.ElementRef<\"button\">;",
      "",
      "export interface ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Props",
      "  extends Omit<",
      "      React.ComponentPropsWithoutRef<\"button\">,",
      "      \"children\" | \"className\" | \"type\"",
      "    >,",
      "    ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Variants {",
      "  /** Sets the content. **Required** */",
      "  children: React.ReactNode;",
      "  /** Sets the `class` attribute. */",
      "  className?: string | undefined;",
      "  /** Sets the `type` attribute. **Required** */",
      "  type: \"button\" | \"submit\";",
      "}",
      "",
      "export const ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/} = forwardRef<${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Ref, ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Props>(",
      "  ({ children, className, size, type, variant, ...props }, ref) => {",
      "    return (",
      "      <button",
      "        {...props}",
      "        type={type}",
      "        className={cn(${TM_FILENAME/(.*?)\\..+/${1:/camelcase}/}Variants({ className, size, variant }))}",
      "        ref={ref}",
      "      >",
      "        {children}",
      "      </button>",
      "    );",
      "  },",
      ");",
      "",
      "${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}.displayName = \"${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}\";",
      ""
    ]
  },
  "React: Input component with forwardRef": {
    "prefix": "rcfr-input",
    "description": "Creates a React input component with forwardRef",
    "scope": "typescriptreact",
    "body": [
      "import { forwardRef } from \"react\";",
      "import { cn } from \"~/utils/misc\";",
      "",
      "export type ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Ref = React.ElementRef<\"input\">;",
      "",
      "export interface ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Props",
      "  extends Omit<React.ComponentPropsWithoutRef<\"input\">, \"className\" | \"name\"> {",
      "  /** Sets the `class` attribute. */",
      "  className?: string | undefined;",
      "  /** Sets the `name` attribute. **Required** */",
      "  name: string;",
      "}",
      "",
      "export const ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/} = forwardRef<${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Ref, ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Props>(",
      "  ({ className, name, ...props }, ref) => {",
      "    return (",
      "      <input {...props} className={cn(\"\", className)} name={name} ref={ref} />",
      "    );",
      "  },",
      ");",
      "",
      "${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}.displayName = \"${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}\";",
      ""
    ]
  },
  "React: Context with simple tuple": {
    "prefix": "rctx-simple",
    "description": "React: Context with simple tuple",
    "scope": "typescriptreact",
    "body": [
      "import { createContext, useCallback, useContext, useState } from \"react\";",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "$LINE_COMMENT Types",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "export type ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}State = \"enabled\" | \"disabled\";",
      "export type ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}StateSetter = (value?: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}State | undefined) => void;",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "$LINE_COMMENT Constants",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "$LINE_COMMENT TODO: Move to a group exports to separate file.",
      "",
      "export const default${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}State: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}State = \"enabled\";",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "$LINE_COMMENT Context",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "export type ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ContextReturnType = [",
      "  ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}State,",
      "  ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}StateSetter",
      "];",
      "",
      "export const ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Context =",
      "  createContext<${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ContextReturnType | null>(null);",
      "",
      "${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Context.displayName = \"${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Context\";",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "$LINE_COMMENT Hooks",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "$LINE_COMMENT TODO: Move to a group exports to separate file.",
      "",
      "export function use${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}() {",
      "  const context = useContext(${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Context);",
      "  if (context == undefined) {",
      "    throw new Error(\"use${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/} must be used within a <${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Provider>\");",
      "  }",
      "  return context;",
      "}",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "$LINE_COMMENT Provider",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "export interface ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ProviderProps {",
      "  children: React.ReactNode;",
      "  value?: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}State | undefined;",
      "}",
      "",
      "export function ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Provider({",
      "  children,",
      "  value: initialState = default${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}State,",
      "}: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ProviderProps) {",
      "  const [state, setState] = useState(initialState);",
      "",
      "  const setOrToggleState = useCallback(",
      "    (nextState?: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}State) =>",
      "      nextState",
      "        ? setState(nextState)",
      "        : setState((prevState) =>",
      "            prevState === \"enabled\" ? \"disabled\" : \"enabled\"",
      "          ),",
      "    []",
      "  );",
      "",
      "  return (",
      "    <${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Context.Provider value={[state, setOrToggleState]}>",
      "      {children}",
      "    </${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Context.Provider>",
      "  );",
      "}",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "$LINE_COMMENT Usage",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "$LINE_COMMENT TODO: Remove example-only group exports.",
      "",
      "export function ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ParentUsage() {",
      "  return (",
      "    <${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Provider value=\"disabled\">",
      "      <${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ChildUsage />",
      "    </${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Provider>",
      "  );",
      "}",
      "",
      "export function ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ChildUsage() {",
      "  const [state, setOrToggleState] = use${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}();",
      "  return (",
      "    <div>",
      "      <button onClick={() => setOrToggleState(\"enabled\")}>enable</button>",
      "      <button onClick={() => setOrToggleState(\"disabled\")}>disable</button>",
      "      <button onClick={() => setOrToggleState()}>toggle</button>",
      "      <div>state: {state}</div>",
      "    </div>",
      "  );",
      "}",
      ""
    ]
  },
  "React: Context with nested objects": {
    "prefix": "rctx-nested",
    "description": "React: Context with nested objects",
    "scope": "typescriptreact",
    "body": [
      "import { nanoid } from \"nanoid\";",
      "import { createContext, useCallback, useContext, useMemo } from \"react\";",
      "import { useImmerReducer } from \"use-immer\";",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "$LINE_COMMENT Types",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "export interface ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Item {",
      "  id: string;",
      "  value: string;",
      "}",
      "",
      "export interface ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ActionCreate {",
      "  type: \"create\";",
      "  payload: {",
      "    value: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Item[\"value\"];",
      "  };",
      "}",
      "",
      "export interface ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ActionUpdate {",
      "  type: \"update\";",
      "  payload: {",
      "    id: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Item[\"id\"];",
      "    value: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Item[\"value\"];",
      "  };",
      "}",
      "",
      "export interface ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ActionDelete {",
      "  type: \"delete\";",
      "  payload: {",
      "    id: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Item[\"id\"];",
      "  };",
      "}",
      "",
      "export interface ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ActionToggle {",
      "  type: \"toggle\";",
      "  payload: {",
      "    id: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Item[\"id\"];",
      "  };",
      "}",
      "",
      "export interface ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ActionReset {",
      "  type: \"reset\";",
      "}",
      "",
      "export type ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Action =",
      "  | ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ActionCreate",
      "  | ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ActionUpdate",
      "  | ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ActionDelete",
      "  | ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ActionToggle",
      "  | ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ActionReset;",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "$LINE_COMMENT Constants",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "$LINE_COMMENT TODO: Move to a group exports to separate file.",
      "",
      "export const default${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Items: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Item[] = [",
      "  { id: \"1\", value: \"Item 1\" },",
      "  { id: \"2\", value: \"Item 2\" },",
      "  { id: \"3\", value: \"Item 3\" },",
      "  { id: \"4\", value: \"Item 4\" },",
      "  { id: \"5\", value: \"Item 5\" },",
      "];",
      "",
      "export const default${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}SelectedItemIds: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Item[\"id\"][] = [\"1\", \"5\"];",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "$LINE_COMMENT Context",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "export interface ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ContextReturnType {",
      "  items: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Item[];",
      "  selectedItemIds: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Item[\"id\"][];",
      "}",
      "",
      "export const ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Context = createContext<${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ContextReturnType | null>(",
      "  null",
      ");",
      "${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Context.displayName = \"${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Context\";",
      "",
      "export interface ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}MethodsContextReturnType {",
      "  createItem: (payload: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ActionCreate[\"payload\"]) => void;",
      "  updateItem: (payload: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ActionUpdate[\"payload\"]) => void;",
      "  deleteItem: (payload: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ActionDelete[\"payload\"]) => void;",
      "  toggleItem: (payload: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ActionToggle[\"payload\"]) => void;",
      "  reset: () => void;",
      "}",
      "",
      "export const ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}MethodsContext =",
      "  createContext<${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}MethodsContextReturnType | null>(null);",
      "${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}MethodsContext.displayName = \"${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}MethodsContext\";",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "$LINE_COMMENT Hooks",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "$LINE_COMMENT TODO: Move to a group exports to separate file.",
      "",
      "export function use${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}() {",
      "  const context = useContext(${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Context);",
      "  if (context == undefined) {",
      "    throw new Error(\"use${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/} must be used within a <${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Provider>\");",
      "  }",
      "  return context;",
      "}",
      "",
      "export function use${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Methods() {",
      "  const context = useContext(${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}MethodsContext);",
      "  if (context == undefined) {",
      "    throw new Error(",
      "      \"use${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Methods must be used within a <${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}MethodsProvider>\"",
      "    );",
      "  }",
      "  return context;",
      "}",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "$LINE_COMMENT Reducer",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "$LINE_COMMENT TODO: Move to a group exports to separate file.",
      "",
      "export type ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ReducerProps = Pick<",
      "  ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ContextReturnType,",
      "  \"items\" | \"selectedItemIds\"",
      ">;",
      "",
      "export function use${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Reducer(initialState: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ReducerProps) {",
      "  return useImmerReducer((draft, action: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Action) => {",
      "    switch (action.type) {",
      "      case \"create\": {",
      "        $LINE_COMMENT Create a new item.",
      "        draft.items.push({ id: nanoid(), value: action.payload.value });",
      "        break;",
      "      }",
      "",
      "      case \"update\": {",
      "        $LINE_COMMENT Check if the id exists.",
      "        const idx = draft.items.findIndex(",
      "          (item) => item.id === action.payload.id",
      "        );",
      "        $LINE_COMMENT Check if mutatable.",
      "        if (idx !== -1) {",
      "          $LINE_COMMENT Update the item.",
      "          draft.items[idx] = action.payload;",
      "        }",
      "        break;",
      "      }",
      "",
      "      case \"delete\": {",
      "        $LINE_COMMENT Check if the id exists.",
      "        const idx = draft.items.findIndex(",
      "          (item) => item.id === action.payload.id",
      "        );",
      "        $LINE_COMMENT Check if mutatable.",
      "        if (idx !== -1) {",
      "          $LINE_COMMENT Check if the selected id exists.",
      "          const idxSelected = draft.selectedItemIds.findIndex(",
      "            (selectedItemId) => selectedItemId === action.payload.id",
      "          );",
      "          if (idxSelected !== -1) {",
      "            $LINE_COMMENT Remove the id.",
      "            draft.selectedItemIds.splice(idxSelected, 1);",
      "          }",
      "          $LINE_COMMENT Delete the item.",
      "          draft.items.splice(idx, 1);",
      "        }",
      "        break;",
      "      }",
      "",
      "      case \"toggle\": {",
      "        $LINE_COMMENT Check if the id exists.",
      "        const idx = draft.items.findIndex(",
      "          (item) => item.id === action.payload.id",
      "        );",
      "        $LINE_COMMENT Check if mutatable.",
      "        if (idx !== -1) {",
      "          $LINE_COMMENT Check if the selected id exists.",
      "          const idxSelected = draft.selectedItemIds.findIndex(",
      "            (selectedItemId) => selectedItemId === action.payload.id",
      "          );",
      "          if (idxSelected !== -1) {",
      "            $LINE_COMMENT Remove the id.",
      "            draft.selectedItemIds.splice(idxSelected, 1);",
      "          } else {",
      "            $LINE_COMMENT Append the id.",
      "            draft.selectedItemIds.push(action.payload.id);",
      "          }",
      "        }",
      "        break;",
      "      }",
      "",
      "      case \"reset\": {",
      "        $LINE_COMMENT Reset the state.",
      "        draft.items = initialState.items;",
      "        draft.selectedItemIds = initialState.selectedItemIds;",
      "        break;",
      "      }",
      "",
      "      default:",
      "        break;",
      "    }",
      "  }, initialState);",
      "}",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "$LINE_COMMENT Provider",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "export interface ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ProviderProps {",
      "  /** Sets the content. **Required** */",
      "  children: React.ReactNode;",
      "  /** Sets the initial \"items\" state. **Required** */",
      "  initialItems: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ReducerProps[\"items\"];",
      "  /** Sets the initial \"selectedItemIds\" state. */",
      "  initialSelectedItemIds?: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ReducerProps[\"selectedItemIds\"] | undefined;",
      "}",
      "",
      "export function ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Provider({",
      "  children,",
      "  initialItems,",
      "  initialSelectedItemIds,",
      "}: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ProviderProps) {",
      "  const [state, dispatch] = use${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Reducer({",
      "    items: initialItems,",
      "    selectedItemIds: initialSelectedItemIds ?? [],",
      "  });",
      "",
      "  const createItem: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}MethodsContextReturnType[\"createItem\"] = useCallback(",
      "    ({ value }) => dispatch({ type: \"create\", payload: { value } }),",
      "    [dispatch]",
      "  );",
      "",
      "  const updateItem: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}MethodsContextReturnType[\"updateItem\"] = useCallback(",
      "    ({ id, value }) => dispatch({ type: \"update\", payload: { id, value } }),",
      "    [dispatch]",
      "  );",
      "",
      "  const deleteItem: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}MethodsContextReturnType[\"deleteItem\"] = useCallback(",
      "    ({ id }) => dispatch({ type: \"delete\", payload: { id } }),",
      "    [dispatch]",
      "  );",
      "",
      "  const toggleItem: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}MethodsContextReturnType[\"toggleItem\"] = useCallback(",
      "    ({ id }) => dispatch({ type: \"toggle\", payload: { id } }),",
      "    [dispatch]",
      "  );",
      "",
      "  const reset: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}MethodsContextReturnType[\"reset\"] = useCallback(",
      "    () => dispatch({ type: \"reset\" }),",
      "    [dispatch]",
      "  );",
      "",
      "  const items = useMemo(() => state.items, [state.items]);",
      "",
      "  const selectedItemIds = useMemo(",
      "    () => state.selectedItemIds,",
      "    [state.selectedItemIds]",
      "  );",
      "",
      "  const methods = useMemo(",
      "    () => ({",
      "      createItem,",
      "      updateItem,",
      "      deleteItem,",
      "      toggleItem,",
      "      reset,",
      "    }),",
      "    [createItem, updateItem, deleteItem, toggleItem, reset]",
      "  );",
      "",
      "  return (",
      "    <${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Context.Provider value={{ items, selectedItemIds }}>",
      "      <${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}MethodsContext.Provider value={methods}>",
      "        {children}",
      "      </${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}MethodsContext.Provider>",
      "    </${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Context.Provider>",
      "  );",
      "}",
      "",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "$LINE_COMMENT Usage",
      "$LINE_COMMENT -----------------------------------------------------------------------------",
      "",
      "$LINE_COMMENT TODO: Remove example-only group exports.",
      "",
      "export function ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ParentUsage() {",
      "  return (",
      "    <${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Provider initialItems={default${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Items}>",
      "      <${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ChildUsage />",
      "    </${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Provider>",
      "  );",
      "}",
      "",
      "export function ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}ChildUsage() {",
      "  const { items, selectedItemIds } = use${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}();",
      "  const { createItem, updateItem, deleteItem, toggleItem, reset } =",
      "    use${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}Methods();",
      "",
      "  return (",
      "    <div>",
      "      <h2>${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/} Context</h2>",
      "      <div>",
      "        <button onClick={() => createItem({ value: \"New\" })}>Create</button>",
      "        <button onClick={() => updateItem({ id: \"1\", value: \"Updated\" })}>",
      "          Update",
      "        </button>",
      "        <button onClick={() => deleteItem({ id: \"1\" })}>Delete</button>",
      "        <button onClick={() => toggleItem({ id: \"1\" })}>Toggle</button>",
      "        <button onClick={() => reset()}>Reset</button>",
      "      </div>",
      "      <div>",
      "        <pre",
      "          style={{",
      "            fontSize: \"10px\",",
      "            tabSize: 2,",
      "            textAlign: \"left\",",
      "            padding: \"1em\",",
      "            border: \"1px dashed\",",
      "            overflow: \"auto\",",
      "          }}",
      "        >",
      "          {JSON.stringify({ items, selectedItemIds }, null, 2)}",
      "        </pre>",
      "      </div>",
      "    </div>",
      "  );",
      "}",
      ""
    ]
  },
  "React: Storybook story": {
    "prefix": "rsb",
    "description": "React: Storybook story",
    "scope": "typescriptreact",
    "body": [
      "import type { Meta, StoryObj } from \"@storybook/react\";",
      "import { ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/} } from \"./${TM_FILENAME/(.*?)\\..+/${1}/}\";",
      "",
      "const meta: Meta<typeof ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}> = {",
      "  component: ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/},",
      "  tags: [\"autodocs\"],",
      "};",
      "",
      "export default meta;",
      "",
      "type Story = StoryObj<typeof meta>;",
      "",
      "export const Default: Story = {",
      "  args: {",
      "    children: \"${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}\",",
      "  },",
      "};",
      "",
      "export const Disable: Story = {",
      "  args: {",
      "    ...Default.args,",
      "    disabled: true,",
      "  },",
      "};",
      "",
      "export const Example: Story = {",
      "  name: \"Rendered\",",
      "  render: () => (",
      "    <${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/} type=\"button\" disabled>",
      "      ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}",
      "    </${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}>",
      "  ),",
      "};",
      "",
      "/* TODO: Write <${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/} /> stories. */",
      ""
    ]
  },
  "Jest: test": {
    "prefix": "jt",
    "description": "Jest: test",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "test(\"should\", () => {",
      "  expect(${1:provided}).toEqual(${0:expected});",
      "});"
    ]
  },
  "Jest: describe": {
    "prefix": "jd",
    "description": "Jest: describe",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["describe(\"${1:moduleName}\", () => {", "  ${0}", "});"]
  },
  "Jest: describe test": {
    "prefix": "jdt",
    "description": "Jest: describe and test",
    "scope": "javascriptreact,typescriptreact",
    "body": [
      "import { render, screen } from \"@testing-library/react\";",
      "import ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/} from \"./${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}\";",
      "",
      "describe(\"${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}\", () => {",
      "  test(\"should render\", () => {",
      "    render(<${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/} data-testid=\"${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}\">Example</${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}>);",
      "    expect(screen.getByTestId(\"${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/}\")).toBeInTheDocument();",
      "  });",
      "});",
      "",
      "/* TODO: Write <${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/} /> tests. */",
      ""
    ]
  }
}
